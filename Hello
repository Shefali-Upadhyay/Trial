import { getFields } from './radio-with-label.utils';
import { fieldErrorAction } from '../../../utils/store/field-error-slice';
import { stagesAction } from '../../../utils/store/stages-slice';
import * as getUrl from '../../../utils/common/change.utils';

jest.mock('../../../utils/store/field-error-slice', () => ({
  fieldErrorAction: {
    removeMandatoryFields: jest.fn(),
  }
}));

jest.mock('../../../utils/store/stages-slice', () => ({
  stagesAction: {
    removeAddToggleField: jest.fn(),
    resetDefaultValue: jest.fn(),
    resetNewAndOldFields: jest.fn(),
  }
}));

jest.mock('../../../utils/common/change.utils', () => ({
  ...jest.requireActual('../../../utils/common/change.utils'),
  getUrl: {
    getUserInputs: jest.fn(),
    getJourneyType: jest.fn(),
  },
  authenticateType: jest.fn(),
  FindIndex: jest.fn(),
}));

describe('getFields', () => {
  const mockDispatch = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  const mockStages = [{
    stageId: 'ad-2',
    stageInfo: {
      fieldmetadata: {
        data: {
          stages: [
            { stageId: 'ad', fields: [{ name: 'field1' }] },
            { stageId: 'bd', fields: [{ name: 'field2' }] }
          ]
        }
      },
      applicants: {},
      products: []
    }
  }];

  it('should return function and call dispatch for residency_status = PR', () => {
    (getUrl.authenticateType as jest.Mock).mockReturnValue('manual');
    (getUrl.getUserInputs as jest.Mock).mockReturnValue({ NRIC_a_1: 'S1234567A' });

    const radioResidency = {
      logical_field_name: 'residency_status',
      value: 'PR'
    };

    const thunk = getFields(mockStages, radioResidency);
    thunk(mockDispatch);

    expect(mockDispatch).toHaveBeenCalled();
    expect(stagesAction.removeAddToggleField).toHaveBeenCalledWith(expect.objectContaining({
      newFields: ['NRIC']
    }));
  });

  it('should handle work_type = S (Salaried)', () => {
    (getUrl.getUserInputs as jest.Mock).mockReturnValue({
      nature_of_employer_a_1: 'IT',
      job_title_a_1: 'Dev',
      name_of_employer_a_1: 'ABC Corp',
      office_phone_number_a_1: '12345678',
    });

    const radioResidency = {
      logical_field_name: 'work_type',
      value: 'S'
    };

    const thunk = getFields(mockStages, radioResidency);
    thunk(mockDispatch);

    expect(stagesAction.removeAddToggleField).toHaveBeenCalledWith(expect.objectContaining({
      newFields: expect.arrayContaining(['name_of_employer', 'nature_of_employer'])
    }));
  });

  it('should handle preferred_limit = 1', () => {
    const radioResidency = {
      logical_field_name: 'preferred_limit',
      value: '1'
    };

    const thunk = getFields(mockStages, radioResidency);
    thunk(mockDispatch);

    expect(stagesAction.removeAddToggleField).toHaveBeenCalledWith(expect.objectContaining({
      newFields: ['preferred_credit_limit', 'credit_limit_consent_info_5']
    }));
  });

  it('should handle credit_limit_consent = N with productCategory PL', () => {
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('ETC');
    (getUrl.getUserInputs as jest.Mock).mockReturnValue({});
    (getUrl.getProductCategory as jest.Mock).mockReturnValue('PL');

    const radioResidency = {
      logical_field_name: 'credit_limit_consent',
      value: 'N'
    };

    const thunk = getFields(mockStages, radioResidency, null, {
      applicants: { banca_product_applicable_a_1: 'Y' }
    }, {
      eligible_banca_insurances: ['life', 'accident']
    });
    thunk(mockDispatch);

    expect(stagesAction.removeAddToggleField).toHaveBeenCalled();
  });

  it('should handle preferred_limit_etc = 1', () => {
    const radioResidency = {
      logical_field_name: 'preferred_limit_etc',
      value: '1'
    };

    const thunk = getFields(mockStages, radioResidency);
    thunk(mockDispatch);

    expect(stagesAction.removeAddToggleField).toHaveBeenCalledWith(expect.objectContaining({
      newFields: ['preferred_credit_limit_etc']
    }));
  });

  it('should handle transfer_amount_to = Other Bank Credit Card', () => {
    const radioResidency = {
      logical_field_name: 'transfer_amount_to',
      value: 'Other Bank Credit Card'
    };

    const thunk = getFields(mockStages, radioResidency);
    thunk(mockDispatch);

    expect(stagesAction.removeAddToggleField).toHaveBeenCalledWith(expect.objectContaining({
      newFields: ['other_bank_name', 'other_bank_credit_card_bt', 'reenter_other_bank_credit_card_bt']
    }));
  });

  it('should handle Customer_Agree_for_Phoenix_Limit_porting = Y', () => {
    const radioResidency = {
      logical_field_name: 'Customer_Agree_for_Phoenix_Limit_porting',
      value: 'Y'
    };

    const thunk = getFields(mockStages, radioResidency);
    thunk(mockDispatch);

    expect(stagesAction.removeAddToggleField).toHaveBeenCalledWith(expect.objectContaining({
      newFields: ['min_limit']
    }));
  });
});
