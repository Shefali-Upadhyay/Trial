import { getFields } from "../radio-with-label.utils"; import { fieldErrorAction } from "../../../utils/store/field-error-slice"; import { stagesAction } from "../../../utils/store/stages-slice"; import { getProductCategory } from "../../../services/common-service"; import { getUrl, authenticateType, FindIndex } from "../../../utils/common/change.utils";

jest.mock("../../../utils/store/field-error-slice", () => ({ fieldErrorAction: { removeMandatoryFields: jest.fn(), }, }));

jest.mock("../../../utils/store/stages-slice", () => ({ stagesAction: { removeAddToggleField: jest.fn(), resetDefaultValue: jest.fn(), resetNewAndOldFields: jest.fn(), }, }));

jest.mock("../../../utils/common/change.utils", () => ({ getUrl: { getUserInputs: jest.fn(), getJourneyType: jest.fn(), }, authenticateType: jest.fn(), FindIndex: jest.fn(), }));

jest.mock("../../../services/common-service", () => ({ getProductCategory: jest.fn(), }));

describe("getFields", () => { const mockDispatch = jest.fn();

beforeEach(() => { jest.clearAllMocks(); });

it("should handle 'residency_status' as PR", () => { authenticateType.mockReturnValue("manual"); getUrl.getUserInputs.mockReturnValue({}); const radioResidency = { logical_field_name: "residency_status", value: "PR", }; const mockStages = [ { stageId: "ssf-1", stageInfo: { fieldmetadata: { data: { stages: [{ stageId: "bd", fields: ["NRIC"] }] } }, applicants: { NRIC_a_1: "S1234567A" }, }, }, ]; getFields(mockStages, radioResidency)(mockDispatch); expect(fieldErrorAction.removeMandatoryFields).toHaveBeenCalled(); });

it("should handle 'work_type' as S", () => { getUrl.getUserInputs.mockReturnValue({ nature_of_employer_a_1: "Govt", job_title_a_1: "Engineer", name_of_employer_a_1: "Org", office_phone_number_a_1: "12345678", }); const radioResidency = { logical_field_name: "work_type", value: "S", }; const mockStages = [{ stageId: "bd-1", stageInfo: { fieldmetadata: { data: { stages: [{ stageId: "bd", fields: [] }] } }, applicants: {}, }, }]; getFields(mockStages, radioResidency)(mockDispatch); expect(stagesAction.removeAddToggleField).toHaveBeenCalled(); });

it("should handle 'casa_fatca_declaration' as NO", () => { const radioResidency = { logical_field_name: "casa_fatca_declaration", value: "NO", }; const mockStages = [ { stageId: "bd-1", stageInfo: { fieldmetadata: { data: { stages: [{ stageId: "bd", fields: [] }] } }, applicants: {}, }, }, ]; getFields(mockStages, radioResidency)(mockDispatch); expect(stagesAction.resetDefaultValue).toHaveBeenCalled(); });

it("should handle 'preferred_limit' as NO", () => { const radioResidency = { logical_field_name: "preferred_limit", value: "NO", }; const mockStages = []; getFields(mockStages, radioResidency)(mockDispatch); expect(stagesAction.resetNewAndOldFields).toHaveBeenCalled(); });

it("should handle 'credit_limit_consent' as NO", () => { const radioResidency = { logical_field_name: "credit_limit_consent", value: "NO", }; getFields([], radioResidency)(mockDispatch); expect(getProductCategory).toHaveBeenCalled(); });

it("should handle 'preferred_contact_per_email'", () => { const radioResidency = { logical_field_name: "preferred_contact_per_email", value: "Yes", }; getFields([], radioResidency)(mockDispatch); expect(mockDispatch).toHaveBeenCalled(); });

it("should handle 'preferred_limit_etc' as YES", () => { const radioResidency = { logical_field_name: "preferred_limit_etc", value: "YES", }; getFields([], radioResidency)(mockDispatch); expect(mockDispatch).toHaveBeenCalled(); });

it("should handle 'deposit_loan_to' field", () => { const radioResidency = { logical_field_name: "deposit_loan_to", value: "Account", }; getFields([], radioResidency)(mockDispatch); expect(mockDispatch).toHaveBeenCalled(); });

it("should handle 'Customer_Agree_for_Phoenix_Limit_porting' as NO", () => { const radioResidency = { logical_field_name: "Customer_Agree_for_Phoenix_Limit_porting", value: "NO", }; getFields([], radioResidency)(mockDispatch); expect(stagesAction.resetNewAndOldFields).toHaveBeenCalled(); }); });
