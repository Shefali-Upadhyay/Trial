import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import Number from '../Number'; // Adjust path as needed
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { IField } from '@/utils/types';
import { getAddressDetails, validateAccountNumber } from '@/utils/fieldValidation';

jest.mock('@/utils/fieldValidation', () => ({
  getAddressDetails: jest.fn(),
  validateAccountNumber: jest.fn()
}));

const mockStore = configureStore([]);
const setup = (fieldOverrides: Partial<IField> = {}, storeOverrides = {}) => {
  const defaultField: IField = {
    id: 'postalCode',
    fieldType: 'number',
    displayName: 'Postal Code',
    tooltip: '',
    subText: '',
    placeholder: 'Enter postal code',
    length: 6,
    isDisabled: false,
    dependentField: '',
    dependentValue: '',
    errorMessage: 'Invalid postal code',
    value: '',
    isOptional: false,
    ...fieldOverrides,
  };

  const store = mockStore({
    stage: 'stage1',
    userInputs: {
      stage1: {
        field1: 'value1',
        postalCode: '',
      },
    },
    errors: {
      stage1: {
        postalCode: false,
      },
    },
    ...storeOverrides,
  });

  render(
    <Provider store={store}>
      <Number field={defaultField} />
    </Provider>
  );

  return { store };
};

describe('Number Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders postal code input and calls getAddressDetails on valid input', async () => {
    (getAddressDetails as jest.Mock).mockResolvedValue({
      city: 'Mumbai',
      state: 'MH',
    });

    setup({ id: 'postalCode', fieldType: 'number', length: 6 });

    const input = screen.getByPlaceholderText('Enter postal code');
    fireEvent.change(input, { target: { value: '400001' } });

    await waitFor(() => {
      expect(getAddressDetails).toHaveBeenCalledWith('400001');
    });
  });

  it('renders account number field and calls validateAccountNumber on valid input', async () => {
    (validateAccountNumber as jest.Mock).mockResolvedValue({
      isValid: true,
    });

    setup({ id: 'accountNumber', fieldType: 'number', length: 10 });

    const input = screen.getByPlaceholderText('Enter postal code');
    fireEvent.change(input, { target: { value: '1234567890' } });

    await waitFor(() => {
      expect(validateAccountNumber).toHaveBeenCalledWith('1234567890');
    });
  });

  it('shows error for invalid postal code', async () => {
    (getAddressDetails as jest.Mock).mockResolvedValue(undefined);

    setup({ id: 'postalCode' });

    const input = screen.getByPlaceholderText('Enter postal code');
    fireEvent.change(input, { target: { value: '123' } });

    await waitFor(() => {
      expect(getAddressDetails).not.toHaveBeenCalled();
    });

    // Simulate Redux error state
    const storeWithError = mockStore({
      stage: 'stage1',
      userInputs: {
        stage1: {
          postalCode: '123',
        },
      },
      errors: {
        stage1: {
          postalCode: true,
        },
      },
    });

    render(
      <Provider store={storeWithError}>
        <Number field={{ id: 'postalCode', fieldType: 'number', errorMessage: 'Invalid postal code' } as IField} />
      </Provider>
    );

    expect(await screen.findByText('Invalid postal code')).toBeInTheDocument();
  });

  it('does not render field if dependentField does not match dependentValue', () => {
    const store = mockStore({
      stage: 'stage1',
      userInputs: {
        stage1: {
          anotherField: 'NO',
        },
      },
      errors: {
        stage1: {},
      },
    });

    const { container } = render(
      <Provider store={store}>
        <Number field={{
          id: 'dependentFieldTest',
          fieldType: 'number',
          dependentField: 'anotherField',
          dependentValue: 'YES',
        } as IField} />
      </Provider>
    );

    expect(container).toBeEmptyDOMElement();
  });

  it('renders subtext and tooltip if provided', () => {
    setup({
      subText: 'This is a helper text',
      tooltip: 'This is a tooltip',
    });

    expect(screen.getByText('This is a helper text')).toBeInTheDocument();
    expect(screen.getByLabelText('This is a tooltip')).toBeInTheDocument();
  });
});
