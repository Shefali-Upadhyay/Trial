import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { useDispatch, useSelector } from "react-redux";
import ReviewPage from "./review-page";
import reviewpageData from "../../../assets/_json/review.json";
import { dispatchLoader, getProductCategory } from "../../../services/common-service";

jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

jest.mock("../../../services/common-service", () => ({
  dispatchLoader: jest.fn(),
  getProductCategory: jest.fn(),
}));

jest.mock("../../../shared/components/checkbox/checkbox", () => jest.fn((props) => (
  <div data-testid="checkbox" onClick={() => props.setCheckedStatus(!props.checkedStatus)}>
    Checkbox
  </div>
)));

jest.mock("../../../shared/components/signature/signature", () => jest.fn(() => (
  <div>Signature Component</div>
)));

jest.mock("../../../shared/components/model/tooltip-model", () => jest.fn((props) =>
  props.isTooltipOpen ? <div data-testid="tooltip">Tooltip Content</div> : null
));

describe("ReviewPage Component", () => {
  let mockDispatch: jest.Mock;
  const defaultStageSelector = [
    {
      stageInfo: {
        products: [{ name: "Test Product" }],
        applicants: { application_sourcing_a_1: "0" },
      },
    },
  ];

  beforeEach(() => {
    mockDispatch = jest.fn();
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useSelector as jest.Mock).mockReturnValue(defaultStageSelector);
    (getProductCategory as jest.Mock).mockReturnValue("CC");
    jest.clearAllMocks();
  });

  it("should render CCPL content and dispatch loader", () => {
    render(<ReviewPage />);
    expect(screen.getByText(reviewpageData.CCPL.reviewTitle1)).toBeInTheDocument();
    expect(dispatchLoader).toHaveBeenCalledWith(false);
  });

  it("should render CASA content when category is CA", () => {
    (getProductCategory as jest.Mock).mockReturnValue("CA");
    render(<ReviewPage />);
    expect(screen.getByText(reviewpageData.confirm.reviewPageHeader1)).toBeInTheDocument();
  });

  it("should render CASA content when category is SA", () => {
    (getProductCategory as jest.Mock).mockReturnValue("SA");
    render(<ReviewPage />);
    expect(screen.getByText(reviewpageData.confirm.reviewPageHeader1)).toBeInTheDocument();
  });

  it("should render PL links when productCategory is PL", () => {
    (getProductCategory as jest.Mock).mockReturnValue("PL");
    render(<ReviewPage />);
    expect(screen.getByText(reviewpageData.CCPL.reviewTitle1)).toBeInTheDocument();
    expect(screen.getByTestId("checkbox")).toBeInTheDocument();
  });

  it("should toggle tooltip when icon is clicked", () => {
    render(<ReviewPage />);
    const tooltipIcon = screen.getByRole("button", { hidden: true }) || document.querySelector(".tool-tip");
    fireEvent.click(tooltipIcon as HTMLElement);
    expect(screen.getByTestId("tooltip")).toBeInTheDocument();
  });

  it("should render Signature component when application_sourcing_a_1 is '1'", () => {
    (useSelector as jest.Mock).mockReturnValue([
      {
        stageInfo: {
          products: [{ name: "Test Product" }],
          applicants: { application_sourcing_a_1: "1" },
        },
      },
    ]);
    render(<ReviewPage />);
    expect(screen.getByText("Signature Component")).toBeInTheDocument();
  });

  it("should update checkbox state on click", () => {
    render(<ReviewPage />);
    const checkbox = screen.getByTestId("checkbox");
    fireEvent.click(checkbox);
    expect(checkbox).toBeInTheDocument(); // Indirect confirmation, mock behavior
  });

  it("should handle missing stageSelector safely", () => {
    (useSelector as jest.Mock).mockReturnValue(undefined);
    render(<ReviewPage />);
    expect(mockDispatch).toHaveBeenCalled(); // Still dispatches loader
  });

  it("should handle empty products array", () => {
    (useSelector as jest.Mock).mockReturnValue([
      { stageInfo: { products: [], applicants: { application_sourcing_a_1: "0" } } },
    ]);
    render(<ReviewPage />);
    expect(screen.getByTestId("checkbox")).toBeInTheDocument();
  });

  it("should render dynamic links for CC", () => {
    render(<ReviewPage />);
    const links = reviewpageData.CCPLReviewContent.contentLink;
    Object.entries(links).forEach(([key, value]: any) => {
      expect(screen.getByText(value.name)).toBeInTheDocument();
    });
  });
});
