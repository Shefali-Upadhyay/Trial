import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { useSelector, useDispatch } from "react-redux";
import ThankYou from "./thank-you";
import * as reactRedux from "react-redux";
import { MemoryRouter } from "react-router-dom";

// Mocks
jest.mock("../../../utils/common/change.utils", () => ({
  getUrl: {
    getChannelRefNo: () => ({
      applicationRefNo: "REF123",
    }),
    getParameterByName: (param: string) => {
      if (param === "auth") return null;
      return null;
    },
    getUpdatedStage: () => ({
      ccplChannel: "WEB",
    }),
  },
}));

jest.mock("../../../services/track-events", () => ({
  __esModule: true,
  default: {
    triggerAdobeEvent: jest.fn(),
  },
}));

jest.mock("../../../services/ga-track-events", () => ({
  __esModule: true,
  default: {
    pageView: jest.fn(),
  },
}));

jest.mock("../../../services/common-service", () => ({
  redirectingToIbanking: jest.fn(),
  activateDigitalCard: jest.fn(() => Promise.resolve({ status: "SUCCESS" })),
}));

jest.mock("../../../shared/components/model/model", () => () => <div>Model</div>);
jest.mock("../../../shared/components/popup-model/popup-model", () => ({ children }: any) => <div>{children}</div>);
jest.mock("./thankyou-casa", () => () => <div>ThankYouCASA</div>);
jest.mock("./thankyou-upload", () => () => <div>ThankYouUpload</div>);
jest.mock("./cc-without-activation", () => () => <div>CCWithoutActivation</div>);
jest.mock("./cc-activation-success", () => () => <div>CCActivationSuccess</div>);
jest.mock("./thankyou-error", () => () => <div>ThankYouError</div>);

const mockDispatch = jest.fn();
const mockStore = {
  stages: {
    journeyType: "NTB",
    otpSuccess: false,
    isDocumentUpload: false,
    stages: [
      {
        stageId: "thankyou-stage",
        stageInfo: {
          application: {
            application_reference: "REF123",
          },
          applicants: {
            embossed_name_a_1: "John Doe",
            auth_mode_a_1: "IM",
          },
          products: [
            {
              product_category: "CA",
              name: "Current Account",
              product_type: "Basic",
              product_sequence_number: "001",
              acct_details: [
                {
                  account_number: "123456789",
                  card_no: "987654321",
                },
              ],
            },
          ],
        },
      },
    ],
  },
};

describe("ThankYou Component", () => {
  beforeEach(() => {
    jest.clearAllMocks();
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useSelector as jest.Mock).mockImplementation((selectorFn) => selectorFn(mockStore));
  });

  test("renders ThankYou form with CASA product", () => {
    render(
      <MemoryRouter>
        <ThankYou />
      </MemoryRouter>
    );
    expect(screen.getByTestId("form")).toBeInTheDocument();
    expect(screen.getByText("ThankYouCASA")).toBeInTheDocument();
  });

  test("renders ThankYouUpload when auth=upload", () => {
    const mockUrl = require("../../../utils/common/change.utils").getUrl;
    mockUrl.getParameterByName = (param: string) => param === "auth" ? "upload" : null;

    render(
      <MemoryRouter>
        <ThankYou />
      </MemoryRouter>
    );
    expect(screen.getByText("ThankYouUpload")).toBeInTheDocument();
  });

  test("displays CC activation success when otpSuccess is true", async () => {
    (useSelector as jest.Mock).mockImplementation((selectorFn) =>
      selectorFn({
        ...mockStore,
        stages: {
          ...mockStore.stages,
          otpSuccess: true,
        },
      })
    );

    render(
      <MemoryRouter>
        <ThankYou />
      </MemoryRouter>
    );
    expect(await screen.findByText("CCActivationSuccess")).toBeInTheDocument();
  });

  test("renders error component if card activation fails", async () => {
    const { activateDigitalCard } = require("../../../services/common-service");
    activateDigitalCard.mockResolvedValueOnce({ status: "FAILURE" });

    (useSelector as jest.Mock).mockImplementation((selectorFn) =>
      selectorFn({
        ...mockStore,
        stages: {
          ...mockStore.stages,
          otpSuccess: true,
        },
      })
    );

    render(
      <MemoryRouter>
        <ThankYou />
      </MemoryRouter>
    );

    expect(await screen.findByText("ThankYouError")).toBeInTheDocument();
  });
});
