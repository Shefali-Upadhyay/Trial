import React from "react"; import { render, screen, fireEvent } from "@testing-library/react"; import { Provider } from "react-redux"; import configureStore from "redux-mock-store"; import Date from "./dates"; import validateService from "../../../services/validation-service"; import errorMsg from "../../../assets/_json/error.json"; import thunk from "redux-thunk"; import * as ageValidationActions from "../../../utils/store/age-validation-slice"; import { lastAction } from "../../../utils/store/last-accessed-slice";

jest.mock("../../../services/validation-service", () => ({ isValidDate: jest.fn(), calculateAge: jest.fn(), validateAge: jest.fn(), getValidationMsg: jest.fn(), allowOnlyCharacter: jest.fn(), }));

jest.mock("../../../utils/common/change.utils", () => ({ ...jest.requireActual("../../../utils/common/change.utils"), authenticateType: jest.fn().mockReturnValue("myinfo"), handleFieldDispatch: jest.fn().mockReturnValue("mocked-flow-type"), }));

jest.mock("../../../utils/store/last-accessed-slice", () => ({ lastAction: { getField: jest.fn(), }, }));

const mockStore = configureStore([thunk]);

describe("Date Component", () => { let store; let mockProps;

beforeEach(() => { store = mockStore({ stages: { stages: [ { stageId: "bd-1", stageInfo: { applicants: { sample_field_a_1: "1995-10-15", }, products: [ { product_type: "type1", product_category: "category1", }, ], }, }, ], userInput: { applicants: { application_sourcing_a_1: null, }, }, }, fielderror: { error: [], }, });

mockProps = {
  data: {
    logical_field_name: "sample_field",
    rwb_label_name: "Date of Birth",
    mandatory: "Yes",
    editable: false,
  },
  handleCallback: jest.fn(),
  handleFieldDispatch: jest.fn(),
};

});

const renderComponent = () => render( <Provider store={store}> <Date {...mockProps} /> </Provider> );

it("should render empty inputs if no data provided", () => { store = mockStore({ stages: { stages: [ { stageId: "bd-1", stageInfo: { applicants: {}, products: [], }, }, ], userInput: { applicants: {}, }, }, fielderror: { error: [], }, }); renderComponent(); expect(screen.getByPlaceholderText("DD")).toHaveValue(""); expect(screen.getByPlaceholderText("MM")).toHaveValue(""); expect(screen.getByPlaceholderText("YYYY")).toHaveValue(""); });

it("should not call handleCallback if inputs are incomplete", () => { renderComponent(); const dayInput = screen.getByPlaceholderText("DD"); fireEvent.change(dayInput, { target: { value: "12" } }); expect(mockProps.handleCallback).not.toHaveBeenCalledWith( mockProps.data, expect.anything() ); });

it("should prevent non-numeric input", () => { renderComponent(); const yearInput = screen.getByPlaceholderText("YYYY"); fireEvent.change(yearInput, { target: { value: "abcd" } }); expect(yearInput).toHaveValue("abcd"); });

it("should trim whitespace in inputs", () => { renderComponent(); const dayInput = screen.getByPlaceholderText("DD"); fireEvent.change(dayInput, { target: { value: " 5 " } }); fireEvent.blur(dayInput); expect(dayInput).toHaveValue("05"); });

it("should call handleFieldDispatch on blur", () => { renderComponent(); const dayInput = screen.getByPlaceholderText("DD"); fireEvent.blur(dayInput); expect(mockProps.handleFieldDispatch).toHaveBeenCalled(); });

it("should handle edge-case year like 0000", () => { (validateService.isValidDate as jest.Mock).mockReturnValue(true); renderComponent(); const yearInput = screen.getByPlaceholderText("YYYY"); fireEvent.change(yearInput, { target: { value: "0000" } }); expect(validateService.isValidDate).toHaveBeenCalledWith("0000-10-15"); }); });

import React from "react"; import { render, screen, fireEvent } from "@testing-library/react"; import { Provider } from "react-redux"; import configureStore from "redux-mock-store"; import Date from "./dates"; import validateService from "../../../services/validation-service"; import errorMsg from "../../../assets/_json/error.json"; import thunk from "redux-thunk"; import * as ageValidationActions from "../../../utils/store/age-validation-slice"; import { lastAction } from "../../../utils/store/last-accessed-slice";

jest.mock("../../../services/validation-service", () => ({ isValidDate: jest.fn(), calculateAge: jest.fn(), validateAge: jest.fn(), getValidationMsg: jest.fn(), allowOnlyCharacter: jest.fn(), }));

jest.mock("../../../utils/common/change.utils", () => ({ ...jest.requireActual("../../../utils/common/change.utils"), authenticateType: jest.fn().mockReturnValue("myinfo"), handleFieldDispatch: jest.fn().mockReturnValue("mocked-flow-type"), }));

jest.mock("../../../utils/store/last-accessed-slice", () => ({ lastAction: { getField: jest.fn(), }, }));

const mockStore = configureStore([thunk]);

describe("Date Component", () => { let store; let mockProps;

beforeEach(() => { store = mockStore({ stages: { stages: [ { stageId: "bd-1", stageInfo: { applicants: { sample_field_a_1: "1995-10-15", }, products: [ { product_type: "type1", product_category: "category1", }, ], }, }, ], userInput: { applicants: { application_sourcing_a_1: null, }, }, }, fielderror: { error: [], }, });

mockProps = {
  data: {
    logical_field_name: "sample_field",
    rwb_label_name: "Date of Birth",
    mandatory: "Yes",
    editable: false,
  },
  handleCallback: jest.fn(),
  handleFieldDispatch: jest.fn(),
};

});

const renderComponent = () => render( <Provider store={store}> <Date {...mockProps} /> </Provider> );

it("should render empty inputs if no data provided", () => { store = mockStore({ stages: { stages: [ { stageId: "bd-1", stageInfo: { applicants: {}, products: [], }, }, ], userInput: { applicants: {}, }, }, fielderror: { error: [], }, }); renderComponent(); expect(screen.getByPlaceholderText("DD")).toHaveValue(""); expect(screen.getByPlaceholderText("MM")).toHaveValue(""); expect(screen.getByPlaceholderText("YYYY")).toHaveValue(""); });

it("should not call handleCallback if inputs are incomplete", () => { renderComponent(); const dayInput = screen.getByPlaceholderText("DD"); fireEvent.change(dayInput, { target: { value: "12" } }); expect(mockProps.handleCallback).not.toHaveBeenCalledWith( mockProps.data, expect.anything() ); });

it("should prevent non-numeric input", () => { renderComponent(); const yearInput = screen.getByPlaceholderText("YYYY"); fireEvent.change(yearInput, { target: { value: "abcd" } }); expect(yearInput).toHaveValue("abcd"); });

it("should trim whitespace in inputs", () => { renderComponent(); const dayInput = screen.getByPlaceholderText("DD"); fireEvent.change(dayInput, { target: { value: " 5 " } }); fireEvent.blur(dayInput); expect(dayInput).toHaveValue("05"); });

it("should call handleFieldDispatch on blur", () => { renderComponent(); const dayInput = screen.getByPlaceholderText("DD"); fireEvent.blur(dayInput); expect(mockProps.handleFieldDispatch).toHaveBeenCalled(); });

it("should handle edge-case year like 0000", () => { (validateService.isValidDate as jest.Mock).mockReturnValue(true); renderComponent(); const yearInput = screen.getByPlaceholderText("YYYY"); fireEvent.change(yearInput, { target: { value: "0000" } }); expect(validateService.isValidDate).toHaveBeenCalledWith("0000-10-15"); }); });
