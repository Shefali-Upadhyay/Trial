import { getFields } from "../path-to-your-file"; // adjust path accordingly
import { fieldErrorAction } from "../../../utils/store/field-error-slice";
import { stagesAction } from "../../../utils/store/stages-slice";
import { getUrl } from "../../../utils/common/change.utils";

jest.mock("../../../utils/common/change.utils", () => ({
  getUrl: {
    getJourneyType: jest.fn(),
  },
}));

describe("getFields", () => {
  const dispatch = jest.fn();

  const mockStages = [
    {
      stageId: "stage1",
      stageInfo: {
        fieldmetadata: {
          data: {
            stages: [
              {
                stageId: "stage1",
                fields: [
                  {
                    logical_field_name: "mobile_number_rwb",
                    component_type: "TextBox",
                    rwb_label_name: "Mobile Number",
                    editable: true,
                  },
                ],
              },
            ],
          },
        },
      },
    },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("should transform field and dispatch actions", () => {
    (getUrl.getJourneyType as jest.Mock).mockReturnValue("someJourney");

    const phoneSelector = {
      fields: ["mobile_number_rwb"],
    };

    const thunk = getFields(mockStages, phoneSelector);
    const result = thunk(dispatch);

    expect(result).toEqual([
      {
        logical_field_name: "mobile_number",
        component_type: "Phone",
        rwb_label_name: "",
        editable: false,
        hide_remove_btn: true,
      },
    ]);

    expect(dispatch).toHaveBeenCalledWith(
      fieldErrorAction.getMandatoryFields(["mobile_number"])
    );

    expect(dispatch).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: [],
        newFields: ["mobile_number"],
        value: "",
      })
    );
  });

  it("should not dispatch actions when field is home_phone_number_rwb", () => {
    (getUrl.getJourneyType as jest.Mock).mockReturnValue(null);

    const phoneSelector = {
      fields: ["home_phone_number_rwb"],
    };

    const thunk = getFields(mockStages, phoneSelector);
    const result = thunk(dispatch);

    expect(result).toEqual([
      {
        logical_field_name: "home_phone_number",
        component_type: "Phone",
        rwb_label_name: "",
        editable: false,
      },
    ]);

    expect(dispatch).not.toHaveBeenCalledWith(
      fieldErrorAction.getMandatoryFields(expect.anything())
    );
    expect(dispatch).not.toHaveBeenCalledWith(
      stagesAction.removeAddToggleField(expect.anything())
    );
  });

  it("should return empty array if no matching field is found", () => {
    const invalidStages = [
      {
        stageId: "stageX",
        stageInfo: {
          fieldmetadata: {
            data: {
              stages: [],
            },
          },
        },
      },
    ];

    const phoneSelector = {
      fields: ["mobile_number_rwb"],
    };

    const thunk = getFields(invalidStages as any, phoneSelector);
    const result = thunk(dispatch);

    expect(result).toEqual([]);
    expect(dispatch).not.toHaveBeenCalled();
  });
});
