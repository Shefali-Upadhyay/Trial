import React from "react"; import { render, screen, fireEvent } from "@testing-library/react"; import { useDispatch, useSelector } from "react-redux"; import ReviewPage from "./review-page"; import reviewpageData from "@/constants/reviewpage.json";

jest.mock("react-redux", () => ({ useDispatch: jest.fn(), useSelector: jest.fn(), }));

describe("ReviewPage Component", () => { const dispatch = jest.fn();

beforeEach(() => { jest.clearAllMocks(); (useDispatch as jest.Mock).mockReturnValue(dispatch); });

it("should render ReviewPage with CCPL content", () => { (useSelector as jest.Mock).mockImplementation((selectorFn) => selectorFn({ journey: { application_sourcing_a_1: "0", }, }) );

render(<ReviewPage />);
expect(screen.getByText("Terms & Conditions")).toBeInTheDocument();

});

it("should set product details and product category on mount", () => { (useSelector as jest.Mock).mockImplementation((selectorFn) => selectorFn({ journey: { application_sourcing_a_1: "0", }, }) );

render(<ReviewPage />);
expect(dispatch).toHaveBeenCalled();

});

it("should filter and render dynamic links for CCPL content", () => { (useSelector as jest.Mock).mockImplementation((selectorFn) => selectorFn({ journey: { application_sourcing_a_1: "0", }, }) );

render(<ReviewPage />);
const links = reviewpageData.CCPLReviewContent.contentLink;
Object.entries(links).forEach(([_, value]: any) => {
  expect(screen.getByText((content, node) => {
    const hasText = node?.textContent?.includes(value.name);
    return hasText || false;
  })).toBeInTheDocument();
});

});

it("should handle dispatch call when component mounts", () => { (useSelector as jest.Mock).mockImplementation((selectorFn) => selectorFn({ journey: { application_sourcing_a_1: "0", }, }) );

render(<ReviewPage />);
expect(dispatch).toHaveBeenCalled();

});

it("should render Signature component when application_sourcing_a_1 is '1'", () => { (useSelector as jest.Mock).mockImplementation((selectorFn) => selectorFn({ journey: { application_sourcing_a_1: "1", }, }) );

render(<ReviewPage />);
expect(screen.getByTestId("signature")).toBeInTheDocument();

});

it("should toggle checkbox state when clicked", () => { (useSelector as jest.Mock).mockImplementation((selectorFn) => selectorFn({ journey: { application_sourcing_a_1: "0", }, }) );

render(<ReviewPage />);
const checkbox = screen.getByTestId("checkbox");
expect(checkbox).not.toBeChecked();
fireEvent.click(checkbox);
expect(checkbox).toBeChecked();

});

it("should show tooltip icon toggle", () => { (useSelector as jest.Mock).mockImplementation((selectorFn) => selectorFn({ journey: { application_sourcing_a_1: "0", }, }) );

render(<ReviewPage />);
const tooltipIcon = screen.getByTestId("tooltip-toggle");
fireEvent.click(tooltipIcon);
expect(tooltipIcon).toBeInTheDocument();

});

it("should display advisory warning section", () => { (useSelector as jest.Mock).mockImplementation((selectorFn) => selectorFn({ journey: { application_sourcing_a_1: "0", }, }) );

render(<ReviewPage />);
expect(
  screen.getByText("Advisory from the Singapore Police Force â€“ Warning")
).toBeInTheDocument();

}); });
