import React, { useState, useEffect } from "react";
import "./toggle.scss";
import { useDispatch, useSelector } from "react-redux";
import { KeyWithAnyModel, StoreModel } from "../../../utils/model/common-model";
import { isFieldUpdate } from "../../../utils/common/change.utils";
import Alias from "../../components/alias/alias";
import SelectionBox from "../selection-box/selection-box";
import { aliasAction } from "../../../utils/store/alias-slice";
import tax, { taxAction } from "../../../utils/store/tax-slice";
import Text from "../text/text";
import { fieldErrorAction } from "../../../utils/store/field-error-slice";
import { stagesAction } from "../../../utils/store/stages-slice";
import { lastAction } from "../../../utils/store/last-accessed-slice";
import Model from "../model/model";
 import "../information/information.scss";
import Tax from "../../tax/tax";
import fields from "../../../modules/dashboard/fields/fields";
 
const Toggle = (props: KeyWithAnyModel) => {
  const [defaultValue, setDefaultValue] = useState(false);
  const [defaultTaxValue, setDefaultTaxValue] = useState("");
  const [stageId, setStageId] = useState("");
  const [showInfoPopup, setShowInfoPopup] = useState(false);
  const stageSelector = useSelector((state: StoreModel) => state.stages.stages);
  const aliasSelector = useSelector((state: StoreModel) => state.alias);
  const taxSelector =useSelector((state:StoreModel)=>state.tax);
  const userInputSelector = useSelector(
    (state: StoreModel) => state.stages.userInput
  );
  const journeyType = useSelector(
    (state: StoreModel) => state.stages.journeyType
  );
  const applicationSourcing = userInputSelector?.applicants["application_sourcing_a_1"];
  const [hide,show] = useState(true);
  const dispatch = useDispatch();
  const handlePopupBackButton = () => {
    setShowInfoPopup(false);
  };

  useEffect(() => {
        /*istanbul ignore else */
    if (
      stageSelector &&
      stageSelector[0] &&
      stageSelector[0].stageInfo &&
      stageSelector[0].stageInfo.applicants
    ) {
       /*istanbul ignore else */
      if (
        props.data.logical_field_name === "cheque_book_request" ||
        props.data.logical_field_name === "other_name_or_alias" ||
        props.data.logical_field_name === "tax_resident_of_other_country"
      ) {
        const storeVal =
          stageSelector[0].stageInfo.applicants[
            props.data.logical_field_name + "_a_1"
          ];
           /*istanbul ignore else */
        if (storeVal) {
          dispatch(
            isFieldUpdate(props, storeVal, props.data.logical_field_name)
          );
        }

        if (
          stageSelector[0].stageInfo.applicants[
            props.data.logical_field_name + "_a_1"
          ] === "Y" || userInputSelector?.applicants[props.data.logical_field_name + "_a_1"]==="Y"
        ) {
          setDefaultValue(true);
        } else if (
          stageSelector[0].stageInfo.applicants[
            props.data.logical_field_name + "_a_1"
          ] === "N" || userInputSelector?.applicants[props.data.logical_field_name + "_a_1"]==="N"
        ) {
          setDefaultValue(false);
        } else {
          setDefaultValue(false);
          if ((props.data.logical_field_name !== "other_name_or_alias")||(props.data.logical_field_name !== "tax_resident_of_other_country")) {
            dispatch(isFieldUpdate(props, "N", props.data.logical_field_name));
          }
        }
      }
       /*istanbul ignore else */
      if (
        stageSelector &&
        stageSelector.length > 0 &&
        stageSelector[0].stageId
      ) {
        setStageId(stageSelector[0].stageId);
      }
    }
    if(stageSelector[0].stageId === "bd-3"){
      dispatch(
        stagesAction.removeAddToggleField({
          removeFields: [],
          newFields: ['declare_preferred_contacts'],
          value:'N'
        })
      );
    }
    if((applicationSourcing!=null && applicationSourcing===2) &&stageSelector[0].stageInfo.products[0].product_category==='TD' && stageSelector[0].stageId === "bd-3"){
      setDefaultValue(true);
      dispatch(
        stagesAction.removeAddToggleField({
          removeFields: [],
          newFields: ['signature_crop_from_existing_ac'],
          value:'Y'
        })
      );
    }
    if(stageSelector[0].stageId === "ad-1" && props.data.logical_field_name === "consolidated_stmt_required"){
      setDefaultValue(true);
      dispatch(
        stagesAction.removeAddToggleField({
          removeFields: [],
          newFields: ['consolidated_stmt_required'],
          value: 'Y'
        })
      );
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const onToggle = () => {
    dispatch(lastAction.getField(props.data.logical_field_name));
    if (defaultValue) {
      setDefaultValue(false);
      dispatch(isFieldUpdate(props, "N", props.data.logical_field_name));
      /*istanbul ignore else */
      if (
        props.data.logical_field_name === "other_name_or_alias" &&
        aliasSelector &&
        aliasSelector.fields.length > 0
      ) {
        dispatch(fieldErrorAction.removeMandatoryFields(aliasSelector.fields));
        dispatch(
          stagesAction.removeAddToggleField({
            removeFields: aliasSelector.fields,
            newFields: [],
          })
        );
        dispatch(aliasAction.resetAliasField([]));
      }
      if(props.data.logical_field_name === "consolidated_stmt_required"){
        dispatch(
          stagesAction.removeAddToggleField({
            removeFields: [],
            newFields: ["consolidated_stmt_required"],
            value:'N'
          })
        );
      }
      if (
        props.data.logical_field_name === "tax_resident_of_other_country"
        ) {
        dispatch(fieldErrorAction.removeMandatoryFields(taxSelector.fields));
        dispatch(
          stagesAction.removeAddToggleField({
            removeFields: taxSelector.fields,
            newFields: [],
          })
        );
        dispatch(taxAction.resetTaxField([]));
        // setDefaultTaxValue("");
      }
    } else {
      setDefaultValue(true);
      dispatch(isFieldUpdate(props, "Y", props.data.logical_field_name));
       /*istanbul ignore else */
      if (
        props.data.logical_field_name === "other_name_or_alias" &&
        aliasSelector &&
        aliasSelector.count < 1
      ) {
        dispatch(fieldErrorAction.getMandatoryFields(["alias_1"]));
        dispatch(aliasAction.addAliasField("alias_1"));
        dispatch(aliasAction.updateCount(1));
      }
      else if(props.data.logical_field_name === "tax_resident_of_other_country"
      ){
        dispatch(fieldErrorAction.getMandatoryFields(["no_of_tax_residency_country"]));
        dispatch(taxAction.addTaxFiled("no_of_tax_residency_country"));
        dispatch(taxAction.updateCount(1));
        }
       else if(props.data.logical_field_name === "consolidated_stmt_required"){
          dispatch(
            stagesAction.removeAddToggleField({
              removeFields: [],
              newFields: ["consolidated_stmt_required"],
              value:'Y'
            })
          );
        }
        }
  };
  useEffect(() => {
    const taxCountryCount = parseInt(userInputSelector.applicants["no_of_tax_residency_country_a_1"] || "0");
    if (taxCountryCount > 0) {
      const existingFields = [...taxSelector.fields].filter(field => field.startsWith("country_of_tax_residence"));
      const existingFieldSet = new Set(existingFields);
      for (let i = 1; i <= taxCountryCount; i++) {
        const countryField = `country_of_tax_residence_${i}`;
        if (!existingFieldSet.has(countryField)) {
          dispatch(taxAction.addTaxFiled(countryField));
        }
      }
      existingFields.forEach(field => {
        const fieldIndex = parseInt(field.split("_").pop() || "0");
        if (fieldIndex > taxCountryCount) {
          dispatch(taxAction.removeTaxField(field));
          dispatch(stagesAction.removeAddToggleField({
            removeFields:[field],
            newFields:[],
            value:''
          }))
}
      });
      }
  }, [userInputSelector.applicants["no_of_tax_residency_country_a_1"]]);
  

  useEffect(() => {
    taxSelector.fields.forEach(field => {
        const fieldIndex = field.split("_").pop(); 
        const fieldValue = userInputSelector.applicants[`${field}_a_1`];
        if(fieldValue && fieldValue.length === 3){
          const reasonField = `crs_reason_code_${fieldIndex}_a_1`;
          if (userInputSelector.applicants[reasonField]==="B00") {
          const reasonFields = [
              "crs_reason_code_1_a_1",
              "crs_reason_code_2_a_1",
              "crs_reason_code_3_a_1",
              "crs_reason_code_4_a_1",
            ];
            reasonFields.forEach((field) => {
              const reasonValue = userInputSelector.applicants[field];
             if (reasonValue) {
                dispatch(taxAction.updateCrsComments({ [field]: reasonValue }));
              }
            });
            }
           else if(userInputSelector.applicants[reasonField]==="A00"||
           userInputSelector.applicants[reasonField]==="C00"){
            const cmntsFields = `crs_comments_${fieldIndex}_a_1`
            dispatch(taxAction.removeReasonField(cmntsFields));

           }
         else{
            const taxValue= `tax_id_no_${fieldIndex}_a_1`
            if(userInputSelector.applicants[taxValue]){
            dispatch(
              stagesAction.removeAddToggleField({
                removeFields: [`crs_reason_code_${fieldIndex}`],
                newFields: [],
              })
            );
            }else{
              dispatch(
                stagesAction.removeAddToggleField({
                  removeFields: [`tax_id_no_${fieldIndex}`],
                  newFields: [],
                })
              );
            }
          }
        }
    });
  }, [JSON.stringify(taxSelector.fields), JSON.stringify(userInputSelector.applicants)]);
  useEffect(() => {
    const countryFields = [
      "country_of_tax_residence_1_a_1",
      "country_of_tax_residence_2_a_1",
      "country_of_tax_residence_3_a_1",
      "country_of_tax_residence_4_a_1",
    ];
     countryFields.forEach((field) => {
      const countryValue = userInputSelector.applicants[field];
     if (countryValue) {
        dispatch(taxAction.updateTax({ [field]: countryValue }));
      }
    });
  }, [
    userInputSelector.applicants["country_of_tax_residence_1_a_1"],
    userInputSelector.applicants["country_of_tax_residence_2_a_1"],
    userInputSelector.applicants["country_of_tax_residence_3_a_1"],
    userInputSelector.applicants["country_of_tax_residence_4_a_1"],
  ]);
 
  //employment screen based Non Face to Face selection enable signature_crop_from_existing_ac at Term Deposit product
  // useEffect(()=>{
  //   if(stageSelector[0].stageInfo.products[0].product_category==='TD' && stageSelector[0].stageId === "bd-3" &&(userInputSelector.applicants.application_sourcing_a_1=== null || userInputSelector.applicants.application_sourcing_a_1 === "") &&
  //   (props.data.logical_field_name === "signature_crop_from_existing_ac")){
  //     show(false)
  //   }else if(userInputSelector.applicants.application_sourcing_a_1){
  //     if(userInputSelector.applicants.application_sourcing_a_1==="2" && props.data.logical_field_name === "signature_crop_from_existing_ac"){
  //       show(true)
  //     }else{
  //       show(false)
  //     }
  //   }else{
  //     show(true)
  //   }
  // },[userInputSelector.applicants.application_sourcing_a_1])
  useEffect(()=>{
    if(userInputSelector.applicants["tax_resident_of_other_country_a_1"]==="N"){
      debugger
      dispatch(
        stagesAction.removeAddToggleField({
          removeFields: ["mobile_1_add",
          "mobile_2_add",
          "ofc1",
          "ofc2",
          "office_phone1",
          "office_phone2",
          "ohph1",
          "ohph2",
          "overseas_mobile1",
          "overseas_mobile2",],
          newFields: [],
        })
      );
      
    }
  },[userInputSelector.applicants["tax_resident_of_other_country_a_1"]])
  return (
    <>
      {hide &&!(stageId === "ssf-2" && journeyType) && (
        <div className="toggle__content" id={props.data.logical_field_name}>
          <div className="toggle__content__inner">
            <div className="toggle__desc" dangerouslySetInnerHTML={{__html: props.data.rwb_label_name}}></div>
            <div className="toggle__button__block">
              <div className="toggle__button" onClick={() => onToggle()}>
                <input
                  onChange={() => {
                    // do nothing
                  }}
                  type="checkbox"
                  checked={defaultValue}
                  disabled={stageSelector[0]?.stageInfo?.products[0]?.product_category === 'CA' &&
                  stageSelector[0]?.stageInfo?.products[0]?.product_type === '340' &&
                  props.data?.logical_field_name === 'consolidated_stmt_required'
                    ? true
                    : false}
                />
                <span className="toggle__slider"></span>
              </div>
            </div>
            <span className="radio__header">
        {props.data.info_tooltips === "Yes" &&
           props.data.logical_field_name !== "casa_fatca_declaration" && (
            <div  className="tool-tip__icon">
             <span
               className=" tool-tip"
               onClick={() => setShowInfoPopup(true)}
             ></span>
             </div>
           )}
       </span>
          </div>
          <>
         </>
        </div>
       
      )}
      {defaultValue &&
        props.data.logical_field_name === "other_name_or_alias" && (
          <Alias
            handleCallback={props.handleCallback}
            handleFieldDispatch={props.handleFieldDispatch}
            value={props.value}
          />
        )}
        {defaultValue &&
        props.data.logical_field_name === "tax_resident_of_other_country" && (
          
          <Tax
             handleCallback={props.handleCallback}
             handleFieldDispatch={props.handleFieldDispatch}
             props={props}
          />
        )}
       {showInfoPopup && (
        <Model name={props.data.logical_field_name} isTooltip={true} data={props.data.details}  handlebuttonClick={handlePopupBackButton} />
      )}
    </>
  );
};

export default Toggle;


@import "../../../utils/styles/mixins.scss";
@import "../../../utils/styles/variables.scss";
.toggle__content {
  .toggle__content__inner {
    display: flex;
    align-items: center;
    background: $white;
    padding: 10px 15px;
    width: calc(100% - 30px);
    position: relative;
    border: 1px solid $gray-disabled;
    border-radius: 6px;

    .toggle__desc {
      border-radius: 6px;
      margin-right: 10px;
      cursor: pointer;
      @include font-size(14);
      width: 90%;
    }

    .toggle__button {
      position: relative;
      display: inline-block;
      width: 42px;
      height: 25px;

      input {
        opacity: 0;
        width: 0;
        height: 0;
        &:checked {
          + .toggle__slider {
            background-color: $celtic_blue;
            &:before {
              -webkit-transform: translateX(17px);
              -ms-transform: translateX(17px);
              transform: translateX(17px);
            }
          }
        }
      }
      .toggle__slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: $dark_charcoal;
        -webkit-transition: 0.4s;
        transition: 0.4s;
        border-radius: 34px;

        &:before {
          position: absolute;
          content: "";
          height: 22px;
          width: 22px;
          left: 1.5px;
          bottom: 1.5px;
          background-color: $white;
          -webkit-transition: 0.4s;
          transition: 0.4s;
          border-radius: 50%;
        }
      }
    }
  }
  .tool-tip__icon{
    padding: 15px;
    .tool-tip{
        @include background('../../../assets/_images/Question.png',no-repeat,100%,inline-block,'','','');
        @include dimention(25px, 25px);
    }
  
}
}
