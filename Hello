import { getFields } from '../path-to-utils';
import { fieldErrorAction } from '../../../utils/store/field-error-slice';
import { stagesAction } from '../../../utils/store/stages-slice';
import { getUrl, authenticateType, FindIndex } from '../../../utils/common/change.utils';
import { getProductCategory } from '../../../services/common-service';

jest.mock('../../../utils/common/change.utils', () => ({
  authenticateType: jest.fn(),
  FindIndex: jest.fn(),
  getUrl: {
    getUserInputs: jest.fn(),
    getJourneyType: jest.fn(),
  }
}));

jest.mock('../../../services/common-service', () => ({
  getProductCategory: jest.fn(),
}));

jest.mock('../../../utils/store/field-error-slice', () => ({
  fieldErrorAction: {
    removeMandatoryFields: jest.fn().mockReturnValue('removeMandatoryFields'),
  }
}));

jest.mock('../../../utils/store/stages-slice', () => ({
  stagesAction: {
    removeAddToggleField: jest.fn().mockReturnValue('removeAddToggleField'),
    resetDefaultValue: jest.fn().mockReturnValue('resetDefaultValue'),
    resetNewAndOldFields: jest.fn().mockReturnValue('resetNewAndOldFields'),
  }
}));

describe('getFields', () => {
  const dispatch = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  const mockStages = [{
    stageId: 'ad-2',
    stageInfo: {
      fieldmetadata: {
        data: {
          stages: [
            {
              stageId: 'ad',
              fields: [{ logical_field_name: 'test_field' }],
            }
          ]
        }
      },
      applicants: {
        NRIC_a_1: 'S1234567A',
        crs_reason_code_a_1: 'A00',
        tax_id_no_a_1: 'TX123',
        nationality_a_1: 'SGP',
        banca_product_applicable_a_1: 'Y',
      },
      products: [{ product_type: 'test' }]
    }
  }];

  it('should dispatch correct actions for residency_status = CT', () => {
    (authenticateType as jest.Mock).mockReturnValue('manual');

    const radioResidency = {
      logical_field_name: 'residency_status',
      value: 'CT',
    };

    const thunk = getFields(mockStages, radioResidency);
    thunk(dispatch);

    expect(dispatch).toHaveBeenCalledWith(fieldErrorAction.removeMandatoryFields(["passport_no", "pass_exp_dt"]));
    expect(dispatch).toHaveBeenCalledWith(expect.objectContaining({
      type: 'removeAddToggleField',
      payload: expect.objectContaining({
        newFields: ['NRIC'],
      })
    }));
  });

  it('should dispatch correct actions for work_type = S', () => {
    (authenticateType as jest.Mock).mockReturnValue('manual');
    (getUrl.getUserInputs as jest.Mock).mockReturnValue({
      nature_of_employer_a_1: 'Tech',
      job_title_a_1: 'Engineer',
      name_of_employer_a_1: 'ABC Corp',
      office_phone_number_a_1: '12345678',
    });

    const radioResidency = {
      logical_field_name: 'work_type',
      value: 'S',
    };

    const thunk = getFields(mockStages, radioResidency);
    thunk(dispatch);

    expect(dispatch).toHaveBeenCalledWith(stagesAction.resetDefaultValue(expect.any(Object)));
    expect(dispatch).toHaveBeenCalledWith(stagesAction.removeAddToggleField(expect.any(Object)));
  });

  it('should handle preferred_limit = 1', () => {
    const radioResidency = {
      logical_field_name: 'preferred_limit',
      value: '1',
    };

    const thunk = getFields(mockStages, radioResidency);
    thunk(dispatch);

    expect(dispatch).toHaveBeenCalledWith(fieldErrorAction.removeMandatoryFields(['credit_limit_consent_info_8']));
    expect(dispatch).toHaveBeenCalledWith(expect.objectContaining({
      type: 'removeAddToggleField',
      payload: expect.objectContaining({
        newFields: ['preferred_credit_limit', 'credit_limit_consent_info_5'],
      })
    }));
  });

  // More test cases:
  // - credit_limit_consent = Y/N with eligible_banca_insurances
  // - casa_fatca_declaration logic
  // - preferred_limit_etc and transfer_amount_to variations

});
