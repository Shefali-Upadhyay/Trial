useEffect(() => {
  if (valueSelector.value !== false && stageId !== "doc") {
    // Check if fields and fields.fields are defined before proceeding
    if (fields && fields.fields && Array.isArray(fields.fields) && fields.fields.length > 0) {
      let mandatoryFields: Array<string> = [];
      console.log("Fields", fields);
      let value: KeyStringModel = {};

      fields.fields.forEach((res: FieldsetModel) => {
        if (res.field_set_name === 'Additional Contact Details') {
          console.log("Res", res);
        }
        
        res.fields.forEach((fName: KeyWithAnyModel) => {
          if (res.field_set_name === 'Additional Contact Details') {
            console.log("Logical Field Name:", fName.logical_field_name);
          }

          // Check the condition and insert the new component without mutating the original array
          if (fName.logical_field_name === "mobile_number_rwb" 
            && authenticateType() === "manual" 
            && stageSelector[0].stageId === "ssf-1"
            && Object.keys(userInputSelector.applicants).length === 0) {
            
            const stageComponents = dispatch(
              getFields(stageSelector, {fields:["mobile_number_rwb"]})
            );

            // Create a new fields array by inserting the component at the desired position
            const updatedFields = [
              ...res.fields.slice(0, 4), // Everything before index 4
              stageComponents[0], // Insert the new component
              ...res.fields.slice(4), // Everything after index 4
            ];

            // Update fields with the new fields array
            setFields({
              ...fields,
              fields: fields.fields.map((fieldSet) =>
                fieldSet.field_set_name === res.field_set_name
                  ? { ...fieldSet, fields: updatedFields }
                  : fieldSet
              ),
            });

          } else if (fName.logical_field_name === "mobile_1" && stageSelector[0].stageId === "bd-3" 
            && authenticateType() === "myinfo" && !additionalFields.includes("mobile_1")) {

            const stageComponents = dispatch(
              getFields(stageSelector, {fields:["mobile_1"]})
            );

            const updatedFields = [
              ...res.fields.slice(0, 5),
              stageComponents[0],
              ...res.fields.slice(5),
            ];

            setFields({
              ...fields,
              fields: fields.fields.map((fieldSet) =>
                fieldSet.field_set_name === res.field_set_name
                  ? { ...fieldSet, fields: updatedFields }
                  : fieldSet
              ),
            });

            additionalFields.push("mobile_1");

          } else if (fName.logical_field_name === "mobile_2" && stageSelector[0].stageId === "bd-3"
            && authenticateType() === "myinfo" && !additionalFields.includes("mobile_2")) {

            const stageComponents = dispatch(
              getFields(stageSelector, {fields:["mobile_2"]})
            );

            const updatedFields = [
              ...res.fields.slice(0, 7),
              stageComponents[0],
              ...res.fields.slice(7),
            ];

            setFields({
              ...fields,
              fields: fields.fields.map((fieldSet) =>
                fieldSet.field_set_name === res.field_set_name
                  ? { ...fieldSet, fields: updatedFields }
                  : fieldSet
              ),
            });

            additionalFields.push("mobile_2");

          } else if (fName.logical_field_name === "overseas_mobile1_contact_no" && stageSelector[0].stageId === "bd-3"
            && authenticateType() === "myinfo" && !additionalFields.includes("overseas_mobile1_contact_no")) {

            const stageComponents = dispatch(
              getFields(stageSelector, {fields:["overseas_mobile1_contact_no"]})
            );

            const updatedFields = [
              ...res.fields.slice(0, 9),
              stageComponents[0],
              ...res.fields.slice(9),
            ];

            setFields({
              ...fields,
              fields: fields.fields.map((fieldSet) =>
                fieldSet.field_set_name === res.field_set_name
                  ? { ...fieldSet, fields: updatedFields }
                  : fieldSet
              ),
            });

            additionalFields.push("overseas_mobile1_contact_no");

          } // Add more `else if` conditions here with similar logic for other fields

        });
      });

      if (banckaMandatory && (stageId === "ad-1" || (stageId === "bd-3" && userInputSelector.applicants["credit_limit_consent_a_1"] === "N"))
        && bancaSelector && bancaSelector.banca_product_applicable_a_1 === "Y") {
        setUserInputs({ ...value, ...banckaMandatory });
      } else {
        if (stageSelector[0].stageId === "bd-2" && stage.stages.journeyType === "NTC" && authenticateType() === "manual" 
          && stageSelector[0].stageInfo.applicants.residency_status_a_1 !== "FR") {
          const updatedResponse = { ...value, postal_code: "", street_name: "", block: "" };
          setUserInputs(updatedResponse);
        } else {
          setUserInputs(value);
        }
      }

      if (lastStageSelector !== "doc") {
        dispatch(fieldErrorAction.getMandatoryFields(null));
      }

      dispatch(fieldErrorAction.getMandatoryFields(mandatoryFields));
    } else {
      dispatch(fieldErrorAction.getMandatoryFields(null));
    }
  }
  // eslint-disable-next-line react-hooks/exhaustive-deps
}, [fields, dispatch, valueSelector.value, stageSelector, banckaMandatory]);
