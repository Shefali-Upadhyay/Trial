it('does not render when hide is true', () => {
  render(
    <Provider store={store}>
      <Phone {...mockProps} hide={true} />
    </Provider>
  );
  expect(screen.queryByPlaceholderText(/mobile number/i)).not.toBeInTheDocument();
});

it('shows validation error when mandatory and left empty', () => {
  const input = screen.getByPlaceholderText(/mobile number/i);
  fireEvent.change(input, { target: { value: '' } });
  fireEvent.blur(input);
  const error = screen.queryByText(/required/i);
  expect(error).toBeInTheDocument();
});

it('validates minimum and maximum length correctly', () => {
  const input = screen.getByPlaceholderText(/mobile number/i);

  // Too short
  fireEvent.change(input, { target: { value: '9123' } });
  expect(screen.queryByText(/must be at least/i)).toBeInTheDocument();

  // Too long
  fireEvent.change(input, { target: { value: '912345678901234567' } });
  expect(screen.queryByText(/must not exceed/i)).toBeInTheDocument();
});

it('does not allow editing if editable is false', () => {
  render(
    <Provider store={store}>
      <Phone {...mockProps} data={{ ...mockProps.data, editable: false }} />
    </Provider>
  );
  const input = screen.getByPlaceholderText(/mobile number/i);
  expect(input).toBeDisabled();
});

it('displays and handles RWB (country code) dropdown', () => {
  const dropdown = screen.getByRole('combobox');
  fireEvent.change(dropdown, { target: { value: '60' } });
  expect(mockProps.handleCallback).toHaveBeenCalledWith(expect.anything(), '60');
});
