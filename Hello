import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { useDispatch, useSelector } from "react-redux";
import ReviewPage from "./review-page";
import reviewpageData from "../../../assets/_json/review.json";
import { dispatchLoader, getProductCategory } from "../../../services/common-service";

jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

jest.mock("../../../services/common-service", () => ({
  dispatchLoader: jest.fn(),
  getProductCategory: jest.fn(),
}));

jest.mock("../../../shared/components/checkbox/checkbox", () => jest.fn((props) => (
  <div data-testid="checkbox" onClick={() => props.setCheckedStatus(!props.checkedStatus)}>
    Checkbox
  </div>
)));

jest.mock("../../../shared/components/signature/signature", () => jest.fn(() => (
  <div data-testid="signature">Signature</div>
)));

describe("ReviewPage Component", () => {
  let mockDispatch: jest.Mock;
  const mockStageSelector = [
    {
      stageInfo: {
        products: [
          {
            name: "Test Product",
          },
        ],
        applicants: {
          application_sourcing_a_1: "1",
        },
      },
    },
  ];

  beforeEach(() => {
    mockDispatch = jest.fn();
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useSelector as jest.Mock).mockReturnValue(mockStageSelector);
    (getProductCategory as jest.Mock).mockReturnValue("CC");
    jest.clearAllMocks();
  });

  it("should render ReviewPage with CCPL content", () => {
    render(<ReviewPage />);
    expect(screen.getByText(reviewpageData.CCPL.reviewTitle1)).toBeInTheDocument();
    expect(dispatchLoader).toHaveBeenCalledWith(false);
  });

  it("should set product details and product category on mount", () => {
    render(<ReviewPage />);
    expect(getProductCategory).toHaveBeenCalledWith(mockStageSelector[0].stageInfo.products);
    expect(screen.getByText(reviewpageData.CCPL.reviewTitle1)).toBeInTheDocument();
  });

  it("should filter and render dynamic links for CCPL content", () => {
    render(<ReviewPage />);
    const links = reviewpageData.CCPLReviewContent.contentLink;
    Object.entries(links).forEach(([_, value]: any) => {
      expect(screen.getByText(value.name)).toBeInTheDocument();
    });
  });

  it("should handle dispatch call when component mounts", () => {
    render(<ReviewPage />);
    expect(mockDispatch).toHaveBeenCalledWith(undefined);
  });

  it("should render Signature component when application_sourcing_a_1 is '1'", () => {
    render(<ReviewPage />);
    expect(screen.getByTestId("signature")).toBeInTheDocument();
  });

  it("should toggle checkbox state when clicked", () => {
    render(<ReviewPage />);
    const checkbox = screen.getByTestId("checkbox");
    fireEvent.click(checkbox);
    expect(checkbox).toBeInTheDocument();
  });

  it("should show tooltip icon toggle", () => {
    render(<ReviewPage />);
    const tooltipIcon = screen.getByRole("button", { hidden: true });
    fireEvent.click(tooltipIcon);
    expect(tooltipIcon).toBeInTheDocument();
  });
});
