import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Phone } from './Phone';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

const mockProps = {
  data: {
    logical_field_name: 'mobile_number',
    rwb_label_name: 'Mobile Number',
    mandatory: 'Yes',
    editable: true,
    type: 'text',
    min_length: 8,
    length: 17,
    regex: '^[89]\\d{7}$',
  },
  handleCallback: jest.fn(),
};

const initialState = {
  lov: { lov: [] },
  stages: {
    stages: [{
      stageId: 'ssf-1',
      stageInfo: {
        applicants: {
          mobile_number_a_1: '6591234567',
        },
      }
    }],
    userInput: {
      applicants: {
        mobile_number_a_1: '91234567',
        mobile_number_rwb_a_1: '65',
      },
    },
  },
  fielderror: { error: [] },
};

describe('Phone Component', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore(initialState);
    render(
      <Provider store={store}>
        <Phone {...mockProps} />
      </Provider>
    );
  });

  it('renders phone input with correct placeholder', () => {
    const input = screen.getByPlaceholderText(/mobile number/i);
    expect(input).toBeInTheDocument();
  });

  it('updates input value on change and triggers callback', () => {
    const input = screen.getByPlaceholderText(/mobile number/i);
    fireEvent.change(input, { target: { value: '91234567' } });
    expect(mockProps.handleCallback).toHaveBeenCalledWith(expect.anything(), '91234567');
  });

  it('shows error if input is invalid', () => {
    const input = screen.getByPlaceholderText(/mobile number/i);
    fireEvent.change(input, { target: { value: '71234567' } }); // starts with 7, invalid for SG
    const error = screen.queryByText(/must start with 8 or 9/i);
    if (error) {
      expect(error).toBeInTheDocument();
    }
  });
});
